//-----------------------------------------------------------------------------
//   Complex.java
//   Represents complex numbers as a pair of doubles
//
//   pa6
//   Fill in the function definitions below.  Write a ComplexTest class to
//   test all your methods. See notes from 5-22-15 for definitions of the
//   complex arithmetic operations.
//-----------------------------------------------------------------------------

class Complex{

    //--------------------------------------------------------------------------
    // Private Data Fields 
    //--------------------------------------------------------------------------
    private double re;
    private double im;
   
    //--------------------------------------------------------------------------
    // Public Constant Fields 
    //--------------------------------------------------------------------------
    public static final Complex ONE = Complex.valueOf(1,0);
    public static final Complex ZERO = Complex.valueOf(0,0);
    public static final Complex I = Complex.valueOf(0,1);

    //--------------------------------------------------------------------------
    // Constructors 
    //--------------------------------------------------------------------------
    Complex(double a, double b){
	this.re = a;
	this.im = b;
    }

    Complex(double a){
	this.re = a;
	this.im = 0;
    }

    Complex(String s){
	// Fill in this constructor.
	// It should accept expressions like "-2+3i", "2-3i", "3", "5i", etc..
	// Throw a NumberFormatException if s cannot be parsed as Complex.
	double[] part = new double[2];
        part = parseComplex(s);
        this.re = part[0];
        this.im = part[1];
           

}

    //---------------------------------------------------------------------------
    // Public methods 
    //---------------------------------------------------------------------------

    // Complex arithmetic -------------------------------------------------------

    // copy()
    // Return a new Complex equal to this Complex
    Complex copy(){
        Complex x = this;
        double real = x.re;
        double imag = x.im;
        return new Complex( real, imag );
    }
   
    // add()
    // Return a new Complex representing the sum this plus z.
    Complex add(Complex z){
	Complex x = this;
        double real = x.re + z.re;
        double imag = x.im + z.im;
        return new Complex(real, imag);
        
    }
   
    // negate()
    // Return a new Complex representing the negative of this.
    Complex negate(){
        Complex x = this;
	double real = -x.re;
        double imag = -x.im;
        return new Complex(real, imag);
    }

    // sub()
    // Return a new Complex representing the difference this minus z.
    Complex sub(Complex z){
	Complex x = this;
        double real = x.re - z.re;
        double imag = x.im - z.im;
        return new Complex(real, imag);
    }

    // mult()
    // Return a new Complex representing the product this times z.
    Complex mult(Complex z){
	Complex x = this;
        double real = (x.re * z.re) - (x.im * z.im);
        double imag = (x.re * z.im + x.im * z.re);
        return new Complex(real, imag);
    }

    // recip()
    // Return a new Complex representing the reciprocal of this.
    // Throw an ArithmeticException with appropriate message if 
    // this.equals(Complex.ZERO).
    Complex recip(){
	double reciprocal = re*re + im*im;
       
        if(this.equals(Complex.ZERO))
		throw new ArithmeticException("Cannot compute reciprocal if denominator is 0.");
	else
		return new Complex(re / reciprocal, -im / reciprocal);
    }
	        
	  

    // div()
    // Return a new Complex representing the quotient of this by z.
    // Throw an ArithmeticException with appropriate message if 
    // z.equals(Complex.ZERO).
    Complex div(Complex z){
	Complex x = this;
        if(z.equals(Complex.ZERO))
	    throw new ArithmeticException("Invalid arithmetic operation.");
       else
        return x.mult(z.recip());
    }

    // conj()
    // Return a new Complex representing the conjugate of this Complex.
    Complex conj(){
	return new Complex(re, -im);
    }
   
    // Re()
    // Return the real part of this.
    double Re(){
	return re;
    }

    // Im()
    // Return the imaginary part of this.
    double Im(){
	return im;
    }

    // abs()
    // Return the modulus of this Complex, i.e. the distance between 
    // points (0, 0) and (re, im).
    double abs(){
	return Math.sqrt(re*re + im*im);

    }

    // arg()
    // Return the argument of this Complex, i.e. the angle this Complex
    // makes with positive real axis.
    double arg(){
	return Math.atan2(im, re);
    }

    // Other functions ---------------------------------------------------------
   
    // toString()
    // Return a String representation of this Complex.
    // The String returned will be readable by the constructor Complex(String s)
    public String toString(){
	if( im == 0 ){
            return this.re + "";
        }
        if( re == 0 ){
            return this.im + "i";
        }
        if( im < 0 ){
            return this.re + "-" + (this.im*-1) + "i";
	}
        return this.re + "+" + this.im + "i";
    }

    // equals()
    // Return true iff this and obj have the same real and imaginary parts.
    public boolean equals(Object obj){
	Complex temp = (Complex) obj;
        if( this.re == temp.re && this.im == temp.im){
            return true;
        }else{
            return false;      
        }
    }

    // valueOf()
    // Return a new Complex with real part a and imaginary part b.
    static Complex valueOf(double a, double b){
	double real = a;
        double imag = b; 
        return new Complex( real , imag );
    }

    // valueOf()
    // Return a new Complex with real part a and imaginary part 0.
    static Complex valueOf(double a){
	double real = a;
        return new Complex( real, 0 );
    }

    // valueOf()
    // Return a new Complex constructed from s.
    static Complex valueOf(String s){
	double[] part = new double[2];
        part = parseComplex( s );
        double real = part[0];
        double imag = part[1]; 
        return new Complex( real, imag );
    }

    // parseComplex()
    // Returns a double[] of length 2 containing (real, imaginary) parts
    // of a complex number represented by string argument str.  Throws a
    // NumberFormatException if str cannot be parsed as a complex number.
    private static double[] parseComplex(String str){
	double[] part = new double[2];
	String s = str.trim();
	String NUM = "(\\d+\\.\\d*|\\.?\\d+)";
	String SGN = "[+-]?";
	String OP =  "\\s*[+-]\\s*";
	String I =   "i";
	String OR =  "|";
	String REAL = SGN+NUM;
	String IMAG = SGN+NUM+"?"+I;
      String COMP = REAL+OR+
                    IMAG+OR+
	  REAL+OP+NUM+"?"+I;
      
      if( !s.matches(COMP) ){
	  throw new NumberFormatException(
					  "Cannot parse input string \""+s+"\" as Complex");
      }
      s = s.replaceAll("\\s","");     
      if( s.matches(REAL) ){
	  part[0] = Double.parseDouble(s);
	  part[1] = 0;
      }else if( s.matches(SGN+I) ){
	  part[0] = 0;
	  part[1] = Double.parseDouble( s.replace( I, "1.0" ) );
      }else if( s.matches(IMAG) ){
	  part[0] = 0;
	  part[1] = Double.parseDouble( s.replace( I , "" ) );
      }else if( s.matches(REAL+OP+I) ){
	  part[0] = Double.parseDouble( s.replaceAll( "("+REAL+")"+OP+".+" , "$1" ) );
	  part[1] = Double.parseDouble( s.replaceAll( ".+("+OP+")"+I , "$1"+"1.0" ) );
      }else{   //  s.matches(REAL+OP+NUM+I) 
	  part[0] = Double.parseDouble( s.replaceAll( "("+REAL+").+"  , "$1" ) );
	  part[1] = Double.parseDouble( s.replaceAll( ".+("+OP+NUM+")"+I , "$1" ) );
      }
      return part;
    }
    

}
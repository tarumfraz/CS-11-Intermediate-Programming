1;2c// Queens.java
// Tarum Fraz
// tfraz
// pa5
// This program finds and prints solution to the classic N-queens problem

class Queens{

    public static int pivot;
    public static int successor;
    public static int queens;
    public static int totalSolutions;

    public static void main(String[] args){

        boolean vFlag = false;

        if(args.length > 1){

            if(isNum(args[0])){
               queens = Integer.parseInt(args[1]);    

            }else if(args[0].equals("-v") && isNum(args[1])){
                vFlag = true;
                queens = Integer.parseInt(args[1]);

            }else{
                System.out.println("Usage: Queens [-v] number");
                System.out.println("Option: -v verbose output, print all solutions");
                System.exit(0);
	    }
	}
  
	if( args.lenght <= 1 isNum(args[0])){
	  if( args[0] == "8" ){
	     Integer.parseInt(args[0]);
	     System.out.println(queens + "-Queens has " + totalSolutions + " solutions");
	    	}
	  }
    }

   
        int[] A = new int[queens+1];

        for(int i = 0; i<A.length; i++){

            A[i] = i;

        }

        
        int total = factorial(queens);


        for(int i = 0; i<total; i++){

            if(isSolution(A)){
               totalSolutions++;
               
               if(vFlag){
                  printArray(A);
               }
            }

            nextPermutation(A);
        }

        System.out.println(queens + "-Queens has " + totalSolutions + " solutions");


    }



    static boolean isSolution(int[] A){

        int hd;
        int vd;
        boolean noDiag = true;

        for(int i = 1; i <A.length; i++){

            for(int j = i + 1; j<A.length; j++){

                if(j == i){
                    continue;

                }else if(j !=i){
                    hd =Math.abs(i-j);
                    vd =Math.abs(A[i]-A[j]);

                if(hd == vd){
                    noDiag = false;
                }
                }
            }
        }

        if(noDiag == true){
            return true;

        }else{
            return false;
        }
    }



    static void printArray(int[] A){

        System.out.print("(");

        for(int i=1; i<A.length - 1; i++){
            System.out.print(A[i]+", ");
        }

        for(int j= A.length -1; j< A.length; j++){
            System.out.print(A[j]);
        }

        System.out.println(")");
    }



    static void nextPermutation(int[] A){

        pivot = 0;
        successor = 0;

        for(int i = A.length-2; i>0; i--){

            if(A[i] < A[i+1]){
                pivot = i;
                break;
            }
        }


        if(pivot == 0){
            reverse(A);
            return;
        }

        for(int i = A.length-1; i>0; i--){

            if(A[i] > A[pivot]){
                successor = i;
                break;
            }
        }

        swap(pivot, successor, A);
        reverse2(A);

    }





    static int factorial(int n){

        if(n>1){
            return n*factorial(n-1);

        }else{
            return 1;
        }

    }



    static  boolean isNum(String s){

        try{
            Integer.parseInt(s);
            return true;

        }catch(NumberFormatException e){
            return false;

        }
    }



    static void swap(int a, int b, int[] A){

        if( a>0 && b>0 && a< A.length && b< A.length){
            int temp = A[a];
            A[a] = A[b];
            A[b] = temp;
        }

    }



    static void reverse(int[] A){

        for(int i=1, j = A.length-1; i<j; i++, j--){
            swap(i,j,A);
        }
    }



    static void reverse2(int[] A){

        for(int i= pivot + 1, j = A.length-1; i<j; i++, j--){
            swap(i,j,A);

        }
    }
}



